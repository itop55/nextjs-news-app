{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jwtDecode from \"jwt-decode\";\nexport class AuthToken {\n  constructor(token) {\n    this.token = token;\n\n    _defineProperty(this, \"decodedToken\", void 0);\n\n    this.decodedToken = {\n      email: \"\",\n      exp: 0,\n      name: '',\n      avatarUrl: '',\n      role: ''\n    };\n\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {}\n  }\n\n  get userData() {\n    return {\n      email: this.decodedToken.email,\n      name: this.decodedToken.name,\n      avatarUrl: this.decodedToken.avatarUrl,\n      role: this.decodedToken.role\n    };\n  }\n\n  get expiresAt() {\n    return new Date(this.decodedToken.exp * 1000);\n  }\n\n  get isExpired() {\n    return new Date() > this.expiresAt;\n  }\n\n  get isAuthenticated() {\n    return !this.isExpired;\n  }\n\n  get authorizationString() {\n    return `Bearer ${this.token}`;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/CHOROK/projects/news-app/services/auth_token.ts"],"names":["jwtDecode","AuthToken","constructor","token","decodedToken","email","exp","name","avatarUrl","role","e","userData","expiresAt","Date","isExpired","isAuthenticated","authorizationString"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAUA,OAAO,MAAMC,SAAN,CAAgB;AAGrBC,EAAAA,WAAW,CAAUC,KAAV,EAA0B;AAAA,SAAhBA,KAAgB,GAAhBA,KAAgB;;AAAA;;AACnC,SAAKC,YAAL,GAAoB;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,GAAG,EAAE,CAAlB;AAAqBC,MAAAA,IAAI,EAAE,EAA3B;AAA+BC,MAAAA,SAAS,EAAE,EAA1C;AAA8CC,MAAAA,IAAI,EAAE;AAApD,KAApB;;AACA,QAAI;AACF,UAAIN,KAAJ,EAAW,KAAKC,YAAL,GAAoBJ,SAAS,CAACG,KAAD,CAA7B;AACZ,KAFD,CAEE,OAAOO,CAAP,EAAU,CAAE;AACf;;AAED,MAAIC,QAAJ,GAAoB;AAClB,WAAO;AACLN,MAAAA,KAAK,EAAE,KAAKD,YAAL,CAAkBC,KADpB;AAELE,MAAAA,IAAI,EAAE,KAAKH,YAAL,CAAkBG,IAFnB;AAGLC,MAAAA,SAAS,EAAE,KAAKJ,YAAL,CAAkBI,SAHxB;AAILC,MAAAA,IAAI,EAAE,KAAKL,YAAL,CAAkBK;AAJnB,KAAP;AAMD;;AACD,MAAIG,SAAJ,GAAsB;AACpB,WAAO,IAAIC,IAAJ,CAAS,KAAKT,YAAL,CAAkBE,GAAlB,GAAwB,IAAjC,CAAP;AACD;;AAED,MAAIQ,SAAJ,GAAyB;AACvB,WAAO,IAAID,IAAJ,KAAa,KAAKD,SAAzB;AACD;;AAED,MAAIG,eAAJ,GAA+B;AAC7B,WAAO,CAAC,KAAKD,SAAb;AACD;;AAED,MAAIE,mBAAJ,GAA0B;AACxB,WAAQ,UAAS,KAAKb,KAAM,EAA5B;AACD;;AAhCoB","sourcesContent":["import jwtDecode from \"jwt-decode\";\n\nexport type DecodedToken = {\n  readonly email: string;\n  readonly exp: number;\n  readonly name: string;\n  readonly avatarUrl: string;\n  readonly role: string;\n}\n\nexport class AuthToken {\n  readonly decodedToken: DecodedToken;\n\n  constructor(readonly token?: string) {\n    this.decodedToken = { email: \"\", exp: 0, name: '', avatarUrl: '', role: '' };\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {}\n  }\n\n  get userData(): any {\n    return {\n      email: this.decodedToken.email,\n      name: this.decodedToken.name,\n      avatarUrl: this.decodedToken.avatarUrl,\n      role: this.decodedToken.role,\n    }\n  }\n  get expiresAt(): Date {\n    return new Date(this.decodedToken.exp * 1000);\n  }\n\n  get isExpired(): boolean {\n    return new Date() > this.expiresAt;\n  }\n\n  get isAuthenticated(): boolean {\n    return !this.isExpired;\n  }\n\n  get authorizationString() {\n    return `Bearer ${this.token}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}