{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jwtDecode from \"jwt-decode\";\nexport class AuthToken {\n  constructor(token) {\n    this.token = token;\n\n    _defineProperty(this, \"decodedToken\", void 0);\n\n    this.decodedToken = {\n      email: \"\",\n      exp: 0\n    };\n\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {}\n  }\n\n  get decodeToken() {\n    return this.decodedToken;\n  }\n\n  get expiresAt() {\n    return new Date(this.decodedToken.exp * 1000);\n  }\n\n  get isExpired() {\n    return new Date() > this.expiresAt;\n  }\n\n  get isAuthenticated() {\n    return !this.isExpired;\n  }\n\n  get authorizationString() {\n    return `Bearer ${this.token}`;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/CHOROK/projects/news-app/services/auth_token.ts"],"names":["jwtDecode","AuthToken","constructor","token","decodedToken","email","exp","e","decodeToken","expiresAt","Date","isExpired","isAuthenticated","authorizationString"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAOA,OAAO,MAAMC,SAAN,CAAgB;AAGrBC,EAAAA,WAAW,CAAUC,KAAV,EAA0B;AAAA,SAAhBA,KAAgB,GAAhBA,KAAgB;;AAAA;;AACnC,SAAKC,YAAL,GAAoB;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,GAAG,EAAE;AAAlB,KAApB;;AACA,QAAI;AACF,UAAIH,KAAJ,EAAW,KAAKC,YAAL,GAAoBJ,SAAS,CAACG,KAAD,CAA7B;AACZ,KAFD,CAEE,OAAOI,CAAP,EAAU,CAAE;AACf;;AAED,MAAIC,WAAJ,GAAuB;AACrB,WAAO,KAAKJ,YAAZ;AACD;;AACD,MAAIK,SAAJ,GAAsB;AACpB,WAAO,IAAIC,IAAJ,CAAS,KAAKN,YAAL,CAAkBE,GAAlB,GAAwB,IAAjC,CAAP;AACD;;AAED,MAAIK,SAAJ,GAAyB;AACvB,WAAO,IAAID,IAAJ,KAAa,KAAKD,SAAzB;AACD;;AAED,MAAIG,eAAJ,GAA+B;AAC7B,WAAO,CAAC,KAAKD,SAAb;AACD;;AAED,MAAIE,mBAAJ,GAA0B;AACxB,WAAQ,UAAS,KAAKV,KAAM,EAA5B;AACD;;AA3BoB","sourcesContent":["import jwtDecode from \"jwt-decode\";\n\nexport type DecodedToken = {\n  readonly email: string;\n  readonly exp: number;\n}\n\nexport class AuthToken {\n  readonly decodedToken: DecodedToken;\n\n  constructor(readonly token?: string) {\n    this.decodedToken = { email: \"\", exp: 0 };\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {}\n  }\n\n  get decodeToken(): any {\n    return this.decodedToken\n  }\n  get expiresAt(): Date {\n    return new Date(this.decodedToken.exp * 1000);\n  }\n\n  get isExpired(): boolean {\n    return new Date() > this.expiresAt;\n  }\n\n  get isAuthenticated(): boolean {\n    return !this.isExpired;\n  }\n\n  get authorizationString() {\n    return `Bearer ${this.token}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}