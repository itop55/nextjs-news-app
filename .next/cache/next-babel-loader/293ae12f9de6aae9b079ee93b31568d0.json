{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport jwtDecode from \"jwt-decode\";\nexport var AuthToken = /*#__PURE__*/function () {\n  function AuthToken(token) {\n    _classCallCheck(this, AuthToken);\n\n    this.token = token;\n\n    _defineProperty(this, \"decodedToken\", void 0);\n\n    this.decodedToken = {\n      email: \"\",\n      exp: 0,\n      name: '',\n      avatarUrl: '',\n      role: ''\n    };\n\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {}\n  }\n\n  _createClass(AuthToken, [{\n    key: \"userData\",\n    get: function get() {\n      return {\n        email: this.decodedToken.email,\n        name: this.decodedToken.name,\n        avatarUrl: this.decodedToken.avatarUrl,\n        role: this.decodedToken.role\n      };\n    }\n  }, {\n    key: \"expiresAt\",\n    get: function get() {\n      return new Date(this.decodedToken.exp * 1000);\n    }\n  }, {\n    key: \"isExpired\",\n    get: function get() {\n      return new Date() > this.expiresAt;\n    }\n  }, {\n    key: \"isAuthenticated\",\n    get: function get() {\n      return !this.isExpired;\n    }\n  }, {\n    key: \"authorizationString\",\n    get: function get() {\n      return \"Bearer \".concat(this.token);\n    }\n  }]);\n\n  return AuthToken;\n}();","map":{"version":3,"sources":["C:/Users/CHOROK/projects/news-app/services/auth_token.ts"],"names":["jwtDecode","AuthToken","token","decodedToken","email","exp","name","avatarUrl","role","e","Date","expiresAt","isExpired"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAUA,WAAaC,SAAb;AAGE,qBAAqBC,KAArB,EAAqC;AAAA;;AAAA,SAAhBA,KAAgB,GAAhBA,KAAgB;;AAAA;;AACnC,SAAKC,YAAL,GAAoB;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,GAAG,EAAE,CAAlB;AAAqBC,MAAAA,IAAI,EAAE,EAA3B;AAA+BC,MAAAA,SAAS,EAAE,EAA1C;AAA8CC,MAAAA,IAAI,EAAE;AAApD,KAApB;;AACA,QAAI;AACF,UAAIN,KAAJ,EAAW,KAAKC,YAAL,GAAoBH,SAAS,CAACE,KAAD,CAA7B;AACZ,KAFD,CAEE,OAAOO,CAAP,EAAU,CAAE;AACf;;AARH;AAAA;AAAA,wBAUsB;AAClB,aAAO;AACLL,QAAAA,KAAK,EAAE,KAAKD,YAAL,CAAkBC,KADpB;AAELE,QAAAA,IAAI,EAAE,KAAKH,YAAL,CAAkBG,IAFnB;AAGLC,QAAAA,SAAS,EAAE,KAAKJ,YAAL,CAAkBI,SAHxB;AAILC,QAAAA,IAAI,EAAE,KAAKL,YAAL,CAAkBK;AAJnB,OAAP;AAMD;AAjBH;AAAA;AAAA,wBAkBwB;AACpB,aAAO,IAAIE,IAAJ,CAAS,KAAKP,YAAL,CAAkBE,GAAlB,GAAwB,IAAjC,CAAP;AACD;AApBH;AAAA;AAAA,wBAsB2B;AACvB,aAAO,IAAIK,IAAJ,KAAa,KAAKC,SAAzB;AACD;AAxBH;AAAA;AAAA,wBA0BiC;AAC7B,aAAO,CAAC,KAAKC,SAAb;AACD;AA5BH;AAAA;AAAA,wBA8B4B;AACxB,8BAAiB,KAAKV,KAAtB;AACD;AAhCH;;AAAA;AAAA","sourcesContent":["import jwtDecode from \"jwt-decode\";\n\nexport type DecodedToken = {\n  readonly email: string;\n  readonly exp: number;\n  readonly name: string;\n  readonly avatarUrl: string;\n  readonly role: string;\n}\n\nexport class AuthToken {\n  readonly decodedToken: DecodedToken;\n\n  constructor(readonly token?: string) {\n    this.decodedToken = { email: \"\", exp: 0, name: '', avatarUrl: '', role: '' };\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {}\n  }\n\n  get userData(): any {\n    return {\n      email: this.decodedToken.email,\n      name: this.decodedToken.name,\n      avatarUrl: this.decodedToken.avatarUrl,\n      role: this.decodedToken.role,\n    }\n  }\n  get expiresAt(): Date {\n    return new Date(this.decodedToken.exp * 1000);\n  }\n\n  get isExpired(): boolean {\n    return new Date() > this.expiresAt;\n  }\n\n  get isAuthenticated(): boolean {\n    return !this.isExpired;\n  }\n\n  get authorizationString() {\n    return `Bearer ${this.token}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}